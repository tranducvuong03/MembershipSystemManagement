// <auto-generated />
using System;
using MembershipSystemManagement.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MembershipSystemManagement.Repository.Migrations
{
    [DbContext(typeof(MembershipDbContext))]
    [Migration("20250910163530_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MembershipSystemManagement.Repository.Entities.LocalAuthentication", b =>
                {
                    b.Property<Guid>("LocalAuthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("FailedAttempts")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LocalAuthId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("LocalAuthentication");
                });

            modelBuilder.Entity("MembershipSystemManagement.Repository.Entities.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MembershipSystemManagement.Repository.Entities.SocialAuthentication", b =>
                {
                    b.Property<Guid>("SocialAuthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProviderUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("SocialAuthId");

                    b.HasIndex("UserId");

                    b.ToTable("SocialAuthentication");
                });

            modelBuilder.Entity("MembershipSystemManagement.Repository.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MembershipSystemManagement.Repository.Entities.LocalAuthentication", b =>
                {
                    b.HasOne("MembershipSystemManagement.Repository.Entities.User", null)
                        .WithOne("LocalAuthentication")
                        .HasForeignKey("MembershipSystemManagement.Repository.Entities.LocalAuthentication", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MembershipSystemManagement.Repository.Entities.SocialAuthentication", b =>
                {
                    b.HasOne("MembershipSystemManagement.Repository.Entities.User", "User")
                        .WithMany("SocialAuthentications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MembershipSystemManagement.Repository.Entities.User", b =>
                {
                    b.HasOne("MembershipSystemManagement.Repository.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MembershipSystemManagement.Repository.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MembershipSystemManagement.Repository.Entities.User", b =>
                {
                    b.Navigation("LocalAuthentication")
                        .IsRequired();

                    b.Navigation("SocialAuthentications");
                });
#pragma warning restore 612, 618
        }
    }
}
